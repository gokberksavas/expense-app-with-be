{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.join.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ResidentInput',\n  data: function data() {\n    return {\n      inputValue: ''\n    };\n  },\n  props: {\n    savedResidents: Array\n  },\n  computed: {\n    toLowerCase: {\n      get: function get() {\n        return this.inputValue;\n      },\n      set: function set(value) {\n        0;\n        this.inputValue = value.toLowerCase();\n      }\n    },\n    isResidentAlreadyAdded: function isResidentAlreadyAdded() {\n      return this.$props.savedResidents.includes(this.inputValue);\n    },\n    isNameLengthAcceptable: function isNameLengthAcceptable() {\n      return this.inputValue.length >= 3;\n    }\n  },\n  methods: {\n    preventNumericInput: function preventNumericInput($event) {\n      var numericRegex = new RegExp(/[0-9]/);\n      var key = $event.key;\n\n      if (numericRegex.test(key)) {\n        $event.preventDefault();\n      }\n\n      if (key === 'Enter') {\n        this.addResident();\n      }\n    },\n    updateInput: function updateInput($event) {\n      var inputValue = $event.target.value.trim();\n      var firstLetterUpperCase;\n\n      if (inputValue !== '' && $event.key !== 'Enter') {\n        firstLetterUpperCase = inputValue.split(/\\s/).map(function (str) {\n          return str.replace(str[0], str[0].toUpperCase());\n        });\n        this.inputValue = firstLetterUpperCase.join(' ');\n      }\n    },\n    addResident: function addResident() {\n      if (this.isResidentAlreadyAdded) {\n        this.$bvModal.msgBoxOk('This resident is already saved!', {\n          size: 'sm',\n          buttonSize: 'sm',\n          okVariant: 'danger',\n          hideHeaderClose: false,\n          centered: true\n        });\n      } else if (!this.isNameLengthAcceptable) {\n        this.$bvModal.msgBoxOk('The name should be at least 3 characters long!', {\n          size: 'sm',\n          buttonSize: 'sm',\n          okVariant: 'danger',\n          hideHeaderClose: false,\n          centered: true\n        });\n      } else {\n        this.isNameLengthAcceptable && this.$emit('resident-added', this.inputValue);\n      }\n\n      this.inputValue = '';\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACAA,uBADA;AAEAC;AACA;AACAC;AADA;AAGA,GANA;AAOAC;AACAC;AADA,GAPA;AAUAC;AACAC;AACAC;AACA;AACA,OAHA;AAIAC;AAAA;AACA;AACA;AANA,KADA;AASAC;AACA;AACA,KAXA;AAYAC;AACA;AACA;AAdA,GAVA;AA0BAC;AACAC;AACA;AACA;;AAEA;AACAC;AACA;;AAEA;AACA;AACA;AACA,KAZA;AAaAC;AACA;AACA;;AAEA;AACAC;AACA;AACA,SAFA;AAIA;AACA;AACA,KAxBA;AAyBAC;AACA;AACA;AACAC,oBADA;AAEAC,0BAFA;AAGAC,6BAHA;AAIAC,gCAJA;AAKAC;AALA;AAOA,OARA,MAQA;AACA;AACAJ,oBADA;AAEAC,0BAFA;AAGAC,6BAHA;AAIAC,gCAJA;AAKAC;AALA;AAOA,OARA,MAQA;AACA;AACA;;AAEA;AACA;AA/CA;AA1BA","names":["name","data","inputValue","props","savedResidents","computed","toLowerCase","get","set","isResidentAlreadyAdded","isNameLengthAcceptable","methods","preventNumericInput","$event","updateInput","firstLetterUpperCase","addResident","size","buttonSize","okVariant","hideHeaderClose","centered"],"sourceRoot":"src/components/resident-section","sources":["ResidentInput.vue"],"sourcesContent":["<template>\r\n    <b-container fluid=\"sm\" class=\"w-50\">\r\n        <b-input-group class=\"shadow-sm\">\r\n            <b-input-group-prepend>\r\n                <b-input-group-text class=\"rounded-0 rounded-start\">Resident Name: </b-input-group-text>\r\n            </b-input-group-prepend>\r\n            <b-form-input \r\n                class=\"rounded-end me-5\"\r\n                placeholder=\"Please type the resident name\" \r\n                :value=\"inputValue\"\r\n                \r\n                @keyup=\"($event) => {\r\n                    preventNumericInput($event),\r\n                    updateInput($event); \r\n                }\"\r\n            />\r\n            <b-input-group-append class=\"ms-5\">\r\n                <b-button variant=\"success\" @click=\"addResident\">Add</b-button>\r\n            </b-input-group-append>\r\n        </b-input-group>\r\n    </b-container>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'ResidentInput',\r\n    data: function () {\r\n        return {\r\n            inputValue: '',\r\n        }\r\n    },\r\n    props: {\r\n        savedResidents: Array\r\n    },\r\n    computed: {\r\n        toLowerCase: {\r\n            get: function () {\r\n                return this.inputValue;\r\n            },\r\n            set: function (value) {0\r\n                this.inputValue = value.toLowerCase(); \r\n            }\r\n        },\r\n        isResidentAlreadyAdded: function () {\r\n            return this.$props.savedResidents.includes(this.inputValue);\r\n        },\r\n        isNameLengthAcceptable: function () {\r\n            return this.inputValue.length >= 3;\r\n        },\r\n    },\r\n    methods: {\r\n        preventNumericInput: function ($event) {\r\n            let numericRegex = new RegExp(/[0-9]/);\r\n            let key = $event.key;\r\n\r\n            if (numericRegex.test(key)) {\r\n                $event.preventDefault();\r\n            }\r\n\r\n            if (key === 'Enter') {\r\n                this.addResident();\r\n            }\r\n        },\r\n        updateInput: function ($event) {\r\n            let inputValue = $event.target.value.trim();   \r\n            let firstLetterUpperCase;    \r\n\r\n            if (inputValue !== '' && $event.key !== 'Enter') {\r\n                firstLetterUpperCase = inputValue.split(/\\s/).map((str) => {\r\n                    return str.replace(str[0], str[0].toUpperCase());\r\n                });\r\n    \r\n                this.inputValue = firstLetterUpperCase.join(' ');\r\n            }\r\n        },\r\n        addResident: function () { \r\n            if (this.isResidentAlreadyAdded) {\r\n                this.$bvModal.msgBoxOk('This resident is already saved!', {\r\n                    size: 'sm',\r\n                    buttonSize: 'sm',\r\n                    okVariant: 'danger',\r\n                    hideHeaderClose: false,\r\n                    centered: true\r\n                });\r\n            } else if (!this.isNameLengthAcceptable) {\r\n                this.$bvModal.msgBoxOk('The name should be at least 3 characters long!', {\r\n                    size: 'sm',\r\n                    buttonSize: 'sm',\r\n                    okVariant: 'danger',\r\n                    hideHeaderClose: false,\r\n                    centered: true\r\n                });\r\n            } else {\r\n                this.isNameLengthAcceptable && this.$emit('resident-added', this.inputValue);\r\n            }\r\n\r\n            this.inputValue = '';\r\n        }\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}